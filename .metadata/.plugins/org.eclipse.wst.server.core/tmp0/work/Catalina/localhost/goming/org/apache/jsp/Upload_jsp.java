/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.90
 * Generated at: 2024-06-24 15:42:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Upload_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/Header.jsp", Long.valueOf(1719237315726L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"ko\">\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("<title>오늘의집-업로드</title>\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"./styles/Reset.css\" />\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"./styles/Upload.css?ver=1\" />\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("	");
      out.write("\n");
      out.write("\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"./styles/Header.css\" />\n");
      out.write("\n");
      out.write("<header>\n");
      out.write("  <h1 class=\"header-logo\"><a href=\"#\">오늘의옷</a></h1>\n");
      out.write("  <div class=\"header-menu\">\n");
      out.write("    <a href=\"#\" id=\"logout\">로그아웃</a>\n");
      out.write("  </div>\n");
      out.write("</header>\n");
      out.write("\n");
      out.write("	<main>\n");
      out.write("		<h2 id=\"logo\">오늘의옷</h2>\n");
      out.write("		<form action=\"UploadService\" method=\"post\"\n");
      out.write("			enctype=\"multipart/form-data\">\n");
      out.write("      <!-- 이미지 -->\n");
      out.write("			<div class=\"content-wrapper test\">\n");
      out.write("				<label for=\"photo\" class=\"form-label\"> <span>이미지 업로드</span></br>\n");
      out.write("					<span id=\"file-name\">Click to add image</span>\n");
      out.write("				</label>\n");
      out.write("        <input type=\"file\" accept=\"*.jpg,*.png,*.jpeg,*.webp,*.avif\"\n");
      out.write("          id=\"photo\" name=\"postImg\" style=\"display: none;\" /> \n");
      out.write("        <!-- 얼굴 인식 모자이크 여부  -->\n");
      out.write("        <div class=\"face-mosaic-wrapper\">\n");
      out.write("          <label for=\"face-mosaic-toggle\" class=\"form-label\" id=\"face-masic-label\">얼굴 모자이크</label>\n");
      out.write("          <div class=\"toggle-switch\">\n");
      out.write("            <input type=\"checkbox\" id=\"face-mosaic-toggle\" name=\"faceMasaic\" />\n");
      out.write("            <label for=\"face-mosaic-toggle\" class=\"toggle-label\">\n");
      out.write("              <span class=\"toggle-inner\"></span>\n");
      out.write("              <span class=\"toggle-switch\"></span>\n");
      out.write("            </label>\n");
      out.write("          </div>\n");
      out.write("        </div>\n");
      out.write("			</div>	\n");
      out.write("      <!-- 성별 -->\n");
      out.write("			<div class=\"content-wrapper\">\n");
      out.write("				<label for=\"gender-list\" class=\"form-label\">성별</label>\n");
      out.write("				<ul id=\"gender-list\">\n");
      out.write("					<li>\n");
      out.write("						<button type=\"button\" class=\"form-btn checked\" onClick=\"setValue('userGender', 'F', this)\">여성</button>\n");
      out.write("					</li>\n");
      out.write("					<li>\n");
      out.write("						<button type=\"button\" class=\"form-btn\" onClick=\"setValue('userGender', 'M', this)\">남성</button>\n");
      out.write("					</li>\n");
      out.write("				</ul>\n");
      out.write("			</div>\n");
      out.write("      <!-- 스타일 -->\n");
      out.write("			<div class=\"content-wrapper\">\n");
      out.write("				<label for=\"style-list\" class=\"form-label\">스타일</label>\n");
      out.write("				<ul id=\"style-list\">\n");
      out.write("					<li>\n");
      out.write("						<button type=\"button\" class=\"form-btn checked\" onClick=\"setValue('style', '미니멀', this)\">미니멀</button>\n");
      out.write("					</li>\n");
      out.write("					<li>\n");
      out.write("						<button type=\"button\" class=\"form-btn\" onClick=\"setValue('style', '비즈니스', this)\">비즈니스</button>\n");
      out.write("					</li>\n");
      out.write("					<li>\n");
      out.write("						<button type=\"button\" class=\"form-btn\" onClick=\"setValue('style', '스포티', this)\">스포티</button></li>\n");
      out.write("					<li>\n");
      out.write("						<button type=\"button\" class=\"form-btn\" onClick=\"setValue('style', '캐주얼', this)\">캐주얼</button>\n");
      out.write("					</li>\n");
      out.write("				</ul>\n");
      out.write("			</div>\n");
      out.write("      <!-- 계절 -->\n");
      out.write("			<div class=\"content-wrapper\">\n");
      out.write("				<label for=\"season-list\" class=\"form-label\">계절</label>\n");
      out.write("				<ul id=\"season-list\">\n");
      out.write("					<li><button type=\"button\" class=\"form-btn\" onClick=\"setValue('season', '봄', this)\">봄</button></li>\n");
      out.write("					<li><button type=\"button\" class=\"form-btn checked\" onClick=\"setValue('season', '여름', this)\">여름</button></li>\n");
      out.write("					<li><button type=\"button\" class=\"form-btn\" onClick=\"setValue('season', '가을', this)\">가을</button></li>\n");
      out.write("					<li><button type=\"button\" class=\"form-btn\" onClick=\"setValue('season', '겨울', this)\">겨울</button></li>\n");
      out.write("				</ul>\n");
      out.write("			</div>\n");
      out.write("			\n");
      out.write("			\n");
      out.write("			\n");
      out.write("      <!-- hidden -->\n");
      out.write("			<input type=\"hidden\" id=\"userGender\" name=\"userGender\" value=selectedGender>\n");
      out.write("			<input type=\"hidden\" id=\"style\" name=\"style\" value=selectedStyle>\n");
      out.write("			<input type=\"hidden\" id=\"season\" name=\"season\" value= selectedSeason>\n");
      out.write("			<input type=\"hidden\" id=\"faceCheck\" name=\"faceCheck\" value = faceCheck>\n");
      out.write("				\n");
      out.write("			<button type=\"submit\" id=\"submit-btn\">등록하기</button>\n");
      out.write("		</form>\n");
      out.write("	</main>\n");
      out.write("\n");
      out.write("	<script>\n");
      out.write("	document.addEventListener('DOMContentLoaded', function() {\n");
      out.write(" 	    // 초기값 설정\n");
      out.write(" 	    document.getElementById('userGender').value = 'F'; // 기본 성별은 여성으로 설정\n");
      out.write(" 	    document.getElementById('style').value = '미니멀'; // 기본 스타일은 미니멀로 설정\n");
      out.write(" 	    document.getElementById('season').value = '여름'; // 기본 계절은 여름으로 설정\n");
      out.write(" 	    document.getElemnetById('faceCheck').value = \"OFF\"; // 기본 모자이크 값은 OFF로 설정\n");
      out.write(" 	    \n");
      out.write(" 	// UI에도 반영 (버튼에 checked 클래스 추가)\n");
      out.write(" 	    document.querySelector('#gender-list .checked').classList.remove('checked');\n");
      out.write(" 	    document.querySelector('#style-list .checked').classList.remove('checked');\n");
      out.write(" 	    document.querySelector('#season-list .checked').classList.remove('checked');\n");
      out.write(" 	    document.querySelector('#face-mosaic-toggle .checked').classList.remove('checked');\n");
      out.write(" 	    \n");
      out.write(" 	    // 초기값에 해당하는 버튼에 checked 클래스 추가\n");
      out.write(" 	    document.querySelector('#gender-list button[value=\"F\"]').classList.add('checked');\n");
      out.write(" 	    document.querySelector('#style-list button[value=\"미니멀\"]').classList.add('checked');\n");
      out.write(" 	    document.querySelector('#season-list button[value=\"여름\"]').classList.add('checked');\n");
      out.write(" 	});\n");
      out.write("	\n");
      out.write(" 	// 이미지 업로드\n");
      out.write("    document.getElementById('photo').addEventListener('change', function() {\n");
      out.write("      let fileName = this.files[0] ? this.files[0].name : 'Click to add image';\n");
      out.write("      document.getElementById('file-name').textContent = fileName;\n");
      out.write("    });\n");
      out.write(" 	\n");
      out.write("    function setValue(hiddenInputId, value, button) {\n");
      out.write("        document.getElementById(hiddenInputId).value = value;\n");
      out.write("        \n");
      out.write("        // 같은 그룹의 모든 버튼에서 checked 클래스 제거\n");
      out.write("        const group = button.parentElement.parentElement;\n");
      out.write("        group.querySelectorAll('.form-btn').forEach(btn => btn.classList.remove('checked'));\n");
      out.write("        \n");
      out.write("        // 클릭된 버튼에 checked 클래스 추가\n");
      out.write("        button.classList.add('checked');\n");
      out.write("        \n");
      out.write("        console.log(hiddenInputId + \": \" + value);\n");
      out.write("    }	\n");
      out.write("    \n");
      out.write("    \n");
      out.write("    // 얼굴인식 토글 값 추출\n");
      out.write("    let faceCheck = \"OFF\";\n");
      out.write("    	\n");
      out.write("    document.getElementById('face-mosaic-toggle').addEventListener('click', function() {\n");
      out.write("        if (this.checked) {\n");
      out.write("            faceCheck = \"ON\";\n");
      out.write("        } else {\n");
      out.write("        	faceCheck = \"OFF\";\n");
      out.write("        }\n");
      out.write("    });\n");
      out.write("    \n");
      out.write("    document.getElementById('gender-list').addEventListener('click', function() {\n");
      out.write("    	console.log(userGender);\n");
      out.write("    	console.log(style);\n");
      out.write("    	console.log(season);\n");
      out.write("    });\n");
      out.write("    \n");
      out.write("    document.getElementById('submit-btn').addEventListener('click', function(event) {\n");
      out.write("        document.getElementById('faceCheck').value = faceCheck;\n");
      out.write("        document.getElementById('userGender').value = selectedGender;\n");
      out.write("        document.getElementById('style').value = selectedStyle;\n");
      out.write("        document.getElementBtId('season').value = selectedSeason;\n");
      out.write("        console.log(faceCheck);\n");
      out.write("    });\n");
      out.write("    \n");
      out.write("    \n");
      out.write("    \n");
      out.write("  </script>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
